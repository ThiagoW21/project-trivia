{"version":3,"sources":["trivia.png","services/fetchApi.js","redux/reducers/player.js","redux/actions/actionTypes.js","redux/reducers/token.js","redux/reducers/time.js","redux/reducers/config.js","redux/reducers/index.js","redux/store/index.js","redux/actions/index.js","pages/Ranking.js","components/Header.jsx","pages/Feedback.js","components/Time.jsx","pages/Game.js","data.js","components/Config.jsx","pages/Login.js","App.js","index.js"],"names":["module","exports","fetchAPI","param","a","fetch","response","json","ok","Promise","resolve","reject","INITIAL_STATE","name","assertions","score","gravatarEmail","picture","player","state","action","type","email","token","error","time","amount","config","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","getState","URL_QUIZ","Ranking","props","players","orderPlayers","JSON","parse","localStorage","getItem","sort","b","this","setState","dispatch","data-testid","map","index","key","src","alt","to","onClick","Component","connect","Header","dispatchGravatar","MD5","toString","className","saveGravatar","Feedback","rankingStorage","storePlayers","setItem","stringify","dispatchResetState","Time","setNewTimer","timer","setInterval","dispatchTime","React","Game","getTimer","responseTime","parseInt","handleClick","target","dispatchUpdateScore","dispatchUpdateAssertions","answerList","parentNode","childNodes","scoring","hard","medium","easy","base","difficulty","dataset","forEach","answer","testid","classList","add","clicked","renderAnswers","currentQuestion","results","incorrectAnswers","incorrect_answers","concat","correctAnswer","correct_answer","answerLength","shuffledAnwers","splice","Math","floor","random","answers","console","log","nextAnswer","answerButtons","document","querySelectorAll","remove","dispatchResetTime","history","length","push","renderButtonNext","newTime","setNewToken","Object","entries","filter","getQuiz","response_code","newToken","NEW_QUIZ_URL","newRequestQuiz","category","he","decode","question","id","data-difficulty","disabled","dispatchRequestQuiz","quiz","receiveQuizFailure","updateScore","renewToken","categories","Config","handleChange","value","saveConfig","questionsRange","categoryChosen","difficultyOption","typeOption","dispatchSaveConfig","indexOf","toLocaleLowerCase","resetConfig","htmlFor","list","min","max","step","onChange","Login","validate","validEmail","test","isDisabled","saveUserData","openConfig","dispatchRequestToken","logo","placeholder","receiveTokenFailure","userLoginData","App","exact","path","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1a64f340.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","const fetchAPI = async (param) => {\n  const response = await fetch(param);\n  const json = await response.json();\n  return response.ok ? Promise.resolve(json) : Promise.reject(json);\n};\n\nexport default fetchAPI;\n","import {\n  USER_LOGIN_DATA,\n  UPDATE_ASSERTIONS,\n  UPDATE_SCORE,\n  SAVE_GRAVATAR,\n  RESET_STATE,\n} from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  picture: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case USER_LOGIN_DATA:\n    return {\n      ...state,\n      name: action.name,\n      gravatarEmail: action.email,\n    };\n  case UPDATE_ASSERTIONS:\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n    };\n  case UPDATE_SCORE:\n    return {\n      ...state,\n      score: state.score + action.score,\n    };\n  case SAVE_GRAVATAR:\n    return {\n      ...state,\n      picture: action.picture,\n    };\n  case RESET_STATE:\n    return {\n      ...state,\n      name: '',\n      assertions: 0,\n      score: 0,\n      gravatarEmail: '',\n      picture: '',\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","export const INITIAL_STATE = {\n  token: '',\n  player: {\n    name: '',\n    assertions: 0,\n    score: 0,\n    gravatarEmail: '',\n    picture: '',\n  },\n  ranking: [],\n};\n\nexport const REQUEST_TOKEN = 'REQUEST_TOKEN';\n\nexport const RECEIVE_TOKEN_SUCCESS = 'RECEIVE_TOKEN_SUCCESS';\n\nexport const RECEIVE_TOKEN_FAILURE = 'RECEIVE_TOKEN_FAILURE';\n\nexport const REQUEST_QUIZ = 'REQUEST_QUIZ';\n\nexport const RECEIVE_QUIZ_SUCCESS = 'RECEIVE_QUIZ_SUCCESS';\n\nexport const RECEIVE_QUIZ_FAILURE = 'RECEIVE_QUIZ_FAILURE';\n\nexport const USER_LOGIN_DATA = 'USER_LOGIN_DATA';\n\nexport const RENEW_TOKEN = 'RENEW_TOKEN';\n\nexport const EXPIRED_TIME = 'EXPIRED_TIME';\n\nexport const UPDATE_ASSERTIONS = 'UPDATE_ASSERTIONS';\n\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\n\nexport const RESET_TIME = 'RESET_TIME';\n\nexport const SAVE_GRAVATAR = 'SAVE_GRAVATAR';\n\nexport const RESET_STATE = 'RESET_STATE';\n\nexport const SAVE_CONFIG = 'SAVE_CONFIG';\n","// Iniciando a branch da tela de jogo\nimport { RECEIVE_TOKEN_FAILURE, RECEIVE_TOKEN_SUCCESS,\n  REQUEST_TOKEN, RENEW_TOKEN } from '../actions/actionTypes';\n\nconst INITIAL_STATE = '';\n\nconst token = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_TOKEN:\n    return (state);\n  case RECEIVE_TOKEN_SUCCESS:\n    return (action.token);\n  case RECEIVE_TOKEN_FAILURE:\n    return (action.error);\n  case RENEW_TOKEN:\n    return (action.token);\n  default:\n    return state;\n  }\n};\n\nexport default token;\n","import { EXPIRED_TIME, RESET_TIME } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  time: false,\n};\n\nconst time = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case EXPIRED_TIME:\n    return {\n      ...state,\n      time: true,\n    };\n  case RESET_TIME:\n    return {\n      ...state,\n      time: false,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default time;\n","import { SAVE_CONFIG, RESET_STATE } from '../actions/actionTypes';\n\nconst INITIAL_STATE = { amount: 5 };\n\nconst config = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_CONFIG:\n    return action.config;\n  case RESET_STATE:\n    return { amount: 5 };\n  default:\n    return state;\n  }\n};\n\nexport default config;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './token';\nimport time from './time';\nimport config from './config';\n\nconst rootReducer = combineReducers({\n  player,\n  token,\n  time,\n  config,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import fetchAPI from '../../services/fetchApi';\nimport store from '../store';\n\nimport {\n  RECEIVE_TOKEN_SUCCESS,\n  RECEIVE_TOKEN_FAILURE,\n  REQUEST_TOKEN,\n  RENEW_TOKEN,\n  RECEIVE_QUIZ_SUCCESS,\n  RECEIVE_QUIZ_FAILURE,\n  REQUEST_QUIZ,\n  USER_LOGIN_DATA,\n  EXPIRED_TIME,\n  UPDATE_ASSERTIONS,\n  UPDATE_SCORE,\n  RESET_TIME,\n  SAVE_GRAVATAR,\n  RESET_STATE,\n  SAVE_CONFIG,\n} from './actionTypes';\n\nexport const requestToken = () => ({\n  type: REQUEST_TOKEN,\n});\n\nexport const receiveTokenSuccess = (token) => ({\n  type: RECEIVE_TOKEN_SUCCESS,\n  token,\n});\n\nexport const receiveTokenFailure = (error) => ({\n  type: RECEIVE_TOKEN_FAILURE,\n  error,\n});\n\nexport const renewToken = (token) => ({\n  type: RENEW_TOKEN,\n  token,\n});\n\nexport const requestQuiz = () => ({\n  type: REQUEST_QUIZ,\n});\n\nexport const receiveQuizSuccess = (quiz) => ({\n  type: RECEIVE_QUIZ_SUCCESS,\n  quiz,\n});\n\nexport const receiveQuizFailure = (error) => ({\n  type: RECEIVE_QUIZ_FAILURE,\n  error,\n});\n\nexport const saveGravatar = (picture) => ({\n  type: SAVE_GRAVATAR,\n  picture,\n});\n\nexport const userLoginData = (name, email) => ({\n  type: USER_LOGIN_DATA,\n  email,\n  name,\n});\n\nexport const expiredTimeAction = () => ({ type: EXPIRED_TIME });\n\nexport const updateAssertions = () => ({ type: UPDATE_ASSERTIONS });\n\nexport const updateScore = (score) => ({ type: UPDATE_SCORE, score });\n\nexport const resetTime = () => ({ type: RESET_TIME });\n\nexport const resetState = () => ({ type: RESET_STATE });\n\nexport const saveConfig = (config) => ({ type: SAVE_CONFIG, config });\n\nconst { token } = store.getState();\nconst URL_TOKEN = 'https://opentdb.com/api_token.php?command=request';\nconst URL_QUIZ = `https://opentdb.com/api.php?amount=5&token=${token}`;\n\nexport const fetchTokenThunk = () => async (dispatch) => {\n  dispatch(requestToken());\n  try {\n    const json = await fetchAPI(URL_TOKEN);\n    dispatch(receiveTokenSuccess(json.token));\n  } catch (error) {\n    dispatch(receiveTokenFailure());\n  }\n};\n\nexport const fetchQuizThunk = () => async (dispatch) => {\n  dispatch(requestQuiz());\n  try {\n    const json = await fetchAPI(URL_QUIZ);\n    dispatch(receiveQuizSuccess(json));\n  } catch (error) {\n    dispatch(receiveQuizFailure());\n  }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { resetState } from '../redux/actions';\nimport store from '../redux/store';\n\nclass Ranking extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [],\n    };\n  }\n\n  componentDidMount() {\n    const players = JSON.parse(localStorage.getItem('ranking'));\n    const orderPlayers = players.sort((a, b) => (b.score - a.score));\n    this.setState({ players: orderPlayers });\n  }\n\n  render() {\n    const { players } = this.state;\n    const { dispatch } = store;\n\n    return (\n      <div>\n        <div data-testid=\"ranking-title\">Ranking</div>\n        { players\n        && players.map((player, index) => (\n          <div key={ index }>\n            <img src={ player.picture } alt=\"Gravatar do jogador\" />\n            <p data-testid={ `player-name-${index}` }>{player.name}</p>\n            <p data-testid={ `player-score-${index}` }>{player.score}</p>\n          </div>\n        ))}\n        <Link to=\"/\">\n          <button\n            data-testid=\"btn-go-home\"\n            type=\"button\"\n            onClick={ () => dispatch(resetState()) }\n          >\n            início\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  gravatarEmail: state.player.gravatarEmail,\n  name: state.player.name,\n});\n\nexport default connect(mapStateToProps)(Ranking);\n","import MD5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { saveGravatar } from '../redux/actions';\nimport './Header.css';\n\nclass Header extends Component {\n  componentDidMount() {\n    const { email, dispatchGravatar } = this.props;\n    const GRAVATAR_URL = `https://www.gravatar.com/avatar/${MD5(email).toString()}`;\n    dispatchGravatar(GRAVATAR_URL);\n  }\n\n  render() {\n    const { name, score, picture } = this.props;\n\n    return (\n      <div className=\"header\">\n        <div className=\"data-player-container\">\n          <img\n            data-testid=\"header-profile-picture\"\n            src={ picture }\n            alt=\"Avatar do usuário\"\n          />\n          <p>\n            Jogador:\n            {' '}\n            <span data-testid=\"header-player-name\">{ name }</span>\n          </p>\n        </div>\n        <p className=\"score-container\">\n          Pontos:\n          {' '}\n          <span data-testid=\"header-score\">{ score }</span>\n        </p>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string,\n  name: PropTypes.string,\n  score: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  email: state.player.gravatarEmail,\n  name: state.player.name,\n  score: state.player.score,\n  picture: state.player.picture,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchGravatar: (picture) => dispatch(saveGravatar(picture)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport { resetState } from '../redux/actions';\nimport './Feedback.css';\n\nconst MIN_CORRECT_ANSWERS = 3;\n\nclass Feedback extends Component {\n  componentDidMount() {\n    const { picture, name, score } = this.props;\n    const player = { name, picture, score };\n    const rankingStorage = JSON.parse(localStorage.getItem('ranking')) || [];\n    const storePlayers = [...rankingStorage, player];\n    localStorage.setItem('ranking', JSON.stringify(storePlayers));\n  }\n\n  render() {\n    const { assertions, score, dispatchResetState } = this.props;\n    return (\n      <div className=\"feedback-page\">\n        <Header />\n        <span className=\"feedback-box\">\n          <p data-testid=\"feedback-text\">\n            { assertions < MIN_CORRECT_ANSWERS ? 'Could be better...' : 'Well Done!' }\n          </p>\n          <p>\n            O seu placar final é de\n            {' '}\n            <strong data-testid=\"feedback-total-score\">{score}</strong>\n          </p>\n          <p>\n            Você acertou\n            {' '}\n            <strong data-testid=\"feedback-total-question\">{assertions}</strong>\n            {' '}\n            perguntas\n          </p>\n        </span>\n        <Link to=\"/\">\n          <button\n            className=\"btn-play-again\"\n            data-testid=\"btn-play-again\"\n            type=\"button\"\n            onClick={ dispatchResetState }\n          >\n            Play Again\n          </button>\n        </Link>\n        <Link to=\"/ranking\">\n          <button\n            className=\"btn-ranking\"\n            data-testid=\"btn-ranking\"\n            type=\"button\"\n          >\n            Ranking\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n  name: state.player.name,\n  picture: state.player.picture,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchResetState: () => dispatch(resetState()),\n});\n\nFeedback.propTypes = {\n  assertions: PropTypes.number,\n  score: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { expiredTimeAction } from '../redux/actions';\nimport './Time.css';\n\nclass Time extends React.Component {\n  componentDidMount() {\n    const { setNewTimer } = this.props;\n    const ONE_SEC = 1000;\n    this.timer = setInterval(setNewTimer, ONE_SEC);\n  }\n\n  render() {\n    const { dispatchTime, timer } = this.props;\n\n    if (timer === 0) {\n      dispatchTime();\n    }\n\n    return (\n      <p className=\"timer\">{ timer }</p>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchTime: () => dispatch(expiredTimeAction()),\n});\n\nTime.propTypes = {\n  dispatchTime: PropTypes.func.isRequired,\n  setNewTimer: PropTypes.func.isRequired,\n  timer: PropTypes.number.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Time);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Game.css';\nimport he from 'he';\nimport Header from '../components/Header';\nimport Time from '../components/Time';\nimport {\n  fetchQuizThunk,\n  renewToken,\n  updateAssertions,\n  updateScore,\n  resetTime,\n} from '../redux/actions';\nimport fetchAPI from '../services/fetchApi';\n\nconst CORRECT_ANSWER = 'correct-answer';\nconst INCORRECT_ANSWER = 'incorrect-answer';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      index: 0,\n      results: [],\n      responseTime: 0,\n      answers: [],\n      clicked: false,\n      timer: 30,\n    };\n  }\n\n  async componentDidMount() {\n    const { token, setNewToken, config } = this.props;\n    let URL_QUIZ = `https://opentdb.com/api.php?token=${token}`;\n    const filterConfig = Object.entries(config)\n      .filter((param) => param[1] !== '');\n    filterConfig.forEach((param) => { URL_QUIZ += `&${param[0]}=${param[1]}`; });\n    console.log(URL_QUIZ);\n    const getQuiz = await fetchAPI(URL_QUIZ);\n    const expiredResponseCode = 3;\n    if (getQuiz.response_code === expiredResponseCode) {\n      const RENEW_URL = 'https://opentdb.com/api_token.php?command=request';\n      const newToken = await fetchAPI(RENEW_URL);\n      setNewToken(newToken);\n      const NEW_QUIZ_URL = `https://opentdb.com/api.php?amount=5&token=${newToken.token}`;\n      const newRequestQuiz = await fetchAPI(NEW_QUIZ_URL);\n      this.setState({ results: newRequestQuiz.results });\n    } else { this.setState({ results: getQuiz.results }); }\n    this.renderAnswers();\n  }\n\n  getTimer = (time) => this.setState({ responseTime: parseInt(time, 10) });\n\n  handleClick = ({ target }) => {\n    const { dispatchUpdateScore, dispatchUpdateAssertions } = this.props;\n    const { responseTime, timer } = this.state;\n    const answerList = target.parentNode.childNodes;\n    const scoring = { hard: 3, medium: 2, easy: 1, base: 10 };\n    const { difficulty } = target.dataset;\n    answerList.forEach((answer) => {\n      if (answer.dataset.testid === CORRECT_ANSWER) {\n        answer.classList.add(CORRECT_ANSWER);\n      } else { answer.classList.add(INCORRECT_ANSWER); }\n    });\n    if (target.dataset.testid === CORRECT_ANSWER) {\n      dispatchUpdateAssertions();\n      dispatchUpdateScore((scoring.base + (responseTime * scoring[difficulty])));\n    }\n    this.setState({ clicked: true });\n    this.getTimer(timer);\n  }\n\n  renderAnswers = () => {\n    const { index, results } = this.state;\n    const currentQuestion = results[index];\n    const { type } = currentQuestion;\n    const incorrectAnswers = currentQuestion.incorrect_answers.concat();\n    const correctAnswer = currentQuestion.correct_answer;\n    const maxLength = 4;\n    const minLength = 2;\n    const answerLength = type === 'multiple' ? maxLength : minLength;\n    const shuffledAnwers = incorrectAnswers.concat();\n    shuffledAnwers\n      .splice(Math.floor(Math.random() * answerLength), 0, correctAnswer);\n    this.setState({ answers: shuffledAnwers, correctAnswer });\n    console.log('renderAnswer', index);\n  }\n\n  nextAnswer = () => {\n    const answerButtons = document.querySelectorAll('.answer');\n    console.log(answerButtons);\n    answerButtons.forEach((answer) => answer\n      .classList.remove(CORRECT_ANSWER, INCORRECT_ANSWER));\n    const { index, results } = this.state;\n    const { dispatchResetTime } = this.props;\n    const { history } = this.props;\n    const finalIndex = results.length - 1;\n    if (index === finalIndex) {\n      history.push('/feedback');\n    } else {\n      this.setState({\n        index: index + 1,\n        timer: 30,\n        clicked: false }, () => this.renderAnswers());\n      dispatchResetTime();\n    }\n  }\n\n  renderButtonNext = () => (\n    <button\n      className=\"next-btn\"\n      data-testid=\"btn-next\"\n      type=\"button\"\n      onClick={ this.nextAnswer }\n    >\n      Next\n\n    </button>\n  )\n\n  setNewTimer = () => {\n    const { timer } = this.state;\n    if (timer === 0) {\n      this.setState({ timer: 0 });\n    } else {\n      const newTime = timer - 1;\n      this.setState({ timer: newTime });\n    }\n  }\n\n  render() {\n    const { index, results, answers, correctAnswer, clicked, timer } = this.state;\n    const { time } = this.props;\n    const currentQuestion = results[index];\n\n    return (\n      <>\n        <Header />\n        {\n          results.length !== 0\n          && (\n            <div className=\"game-container\">\n              <p\n                data-testid=\"question-category\"\n                className=\"question-category\"\n              >\n                {currentQuestion.category}\n              </p>\n              <h3 data-testid=\"question-text\">{he.decode(currentQuestion.question)}</h3>\n              <Time\n                getTimer={ this.getTimer }\n                timer={ timer }\n                setNewTimer={ this.setNewTimer }\n                clicked={ clicked }\n              />\n              <ul data-testid=\"answer-options\">\n                {\n                  answers\n                  && answers.map((answer, id) => (\n                    <button\n                      className=\"answer\"\n                      data-testid={ answer === correctAnswer\n                        ? CORRECT_ANSWER\n                        : `wrong-answer-${id}` }\n                      data-difficulty={ currentQuestion.difficulty }\n                      type=\"button\"\n                      disabled={ time }\n                      key={ id }\n                      onClick={ this.handleClick }\n                    >\n                      { he.decode(answer) }\n                    </button>\n                  ))\n                }\n              </ul>\n            </div>\n          )\n        }\n        {\n          clicked || (timer === 0) ? this.renderButtonNext() : ''\n        }\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  time: state.time.time,\n  config: state.config,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchRequestQuiz: () => dispatch(fetchQuizThunk()),\n  dispatchResetTime: () => dispatch(resetTime()),\n  dispatchUpdateAssertions: () => dispatch(updateAssertions()),\n  dispatchUpdateScore: (score) => dispatch(updateScore(score)),\n  setNewToken: (token) => dispatch(renewToken(token)),\n});\n\nGame.propTypes = {\n  dispatchRequestQuiz: PropTypes.func,\n  token: PropTypes.string,\n  results: PropTypes.arrayOf(PropTypes.object),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","const categories = ['Any', 'General Knowledge', 'Entertainment: Books',\n  'Entertainment: Film', 'Entertainment: Music', 'Entertainment: Musicals & Theatres',\n  'Entertainment: Television', 'Entertainment: Video Games',\n  'Entertainment: Board Games', 'Science & Nature', 'Science: Computers',\n  'Science: Mathematics', 'Mythology', 'Sports', 'Geography', 'History',\n  'Politics', 'Art', 'Celebrities', 'Animals', 'Vehicles',\n  'Entertainment: Comics', 'Science: Gadgets',\n  'Entertainment: Japanese Anime & Manga', 'Entertaiment: Cartoon & Animations'];\n\nexport default categories;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport categories from '../data';\nimport { saveConfig } from '../redux/actions';\nimport './Config.css';\n\nclass Config extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      questionsRange: '5',\n      categoryChosen: 'Any',\n      difficultyOption: 'Any',\n      typeOption: 'Any',\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  saveConfig = () => {\n    const { questionsRange, categoryChosen, difficultyOption,\n      typeOption } = this.state;\n    const { dispatchSaveConfig } = this.props;\n    function translateType() {\n      return (typeOption === 'Multiple Choice' ? 'multiple' : 'boolean');\n    }\n    const modifier = 8;\n    const configSet = {\n      amount: questionsRange,\n      category: categoryChosen !== 'Any'\n        ? (categories.indexOf(categoryChosen) + modifier) : '',\n      difficulty: difficultyOption !== 'Any'\n        ? difficultyOption.toLocaleLowerCase() : '',\n      type: typeOption !== 'Any'\n        ? translateType()\n        : '',\n    };\n    dispatchSaveConfig(configSet);\n  }\n\n  resetConfig = () => {\n    this.setState({\n      questionsRange: '5',\n      categoryChosen: 'Any',\n      difficultyOption: 'Any',\n      typeOption: 'Any',\n    });\n  }\n\n  render() {\n    const { questionsRange, categoryChosen, difficultyOption, typeOption } = this.state;\n    const difficultyList = ['Any', 'Easy', 'Medium', 'Hard'];\n    const typeList = ['Any', 'Multiple Choice', 'True/False'];\n\n    return (\n      <form>\n        <fieldset className=\"config-container\">\n          <legend\n            data-testid=\"settings-title\"\n          >\n            <h2>Configurations</h2>\n          </legend>\n          <div className=\"inner-container\">\n            <label htmlFor=\"questions-range\">\n              {' '}\n              <h3>{`Number of questions: ${questionsRange || '5'}`}</h3>\n              <input\n                name=\"questionsRange\"\n                type=\"range\"\n                list=\"range-options\"\n                value={ questionsRange }\n                min=\"5\"\n                max=\"50\"\n                step=\"5\"\n                onChange={ this.handleChange }\n              />\n            </label>\n            <label htmlFor=\"categories\">\n              <h3>Categories</h3>\n              <select\n                id=\"categories\"\n                name=\"categoryChosen\"\n                value={ categoryChosen }\n                onChange={ this.handleChange }\n              >\n                {\n                  categories.map((category, index) => (\n                    <option key={ index } name=\"categoryChosen\" value={ category }>\n                      {category}\n                    </option>\n                  ))\n                }\n              </select>\n            </label>\n            <label htmlFor=\"difficulty\">\n              <h3>Difficulty</h3>\n              <select\n                id=\"difficulty\"\n                name=\"difficultyOption\"\n                value={ difficultyOption }\n                onChange={ this.handleChange }\n              >\n                {\n                  difficultyList.map((difficulty, index) => (\n                    <option key={ index } name=\"difficultyOption\" value={ difficulty }>\n                      {difficulty}\n                    </option>\n                  ))\n                }\n              </select>\n            </label>\n            <label htmlFor=\"type\">\n              <h3>Type of Question</h3>\n              <select\n                id=\"type\"\n                name=\"typeOption\"\n                value={ typeOption }\n                onChange={ this.handleChange }\n              >\n                {\n                  typeList.map((type, index) => (\n                    <option key={ index } name=\"typeOption\" value={ type }>\n                      {type}\n                    </option>\n                  ))\n                }\n              </select>\n            </label>\n          </div>\n        </fieldset>\n        <div className=\"btn-container\">\n          <button\n            className=\"config-btn\"\n            type=\"button\"\n            onClick={ this.saveConfig }\n          >\n            Save\n          </button>\n          <button\n            className=\"config-btn\"\n            type=\"button\"\n            onClick={ this.resetConfig }\n          >\n            Default configuration\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSaveConfig: (config) => dispatch(saveConfig(config)),\n});\n\nConfig.propTypes = {\n  dispatchSaveConfig: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Config);\n","import React from 'react';\nimport './Login.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport logo from '../trivia.png';\nimport { fetchTokenThunk, userLoginData } from '../redux/actions';\nimport Config from '../components/Config';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      isDisabled: true,\n      name: '',\n      openConfig: false,\n    };\n  }\n\n  componentDidMount() {\n    const { dispatchRequestToken } = this.props;\n    dispatchRequestToken();\n  }\n\n  validate = () => {\n    const { email, name } = this.state;\n    const emailFormat = /\\S+@\\S+\\.\\S+/;\n    const validEmail = emailFormat.test(email);\n    return name && validEmail\n      ? this.setState({ isDisabled: false })\n      : this.setState({ isDisabled: true });\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, this.validate);\n  }\n\n  handleClick = () => {\n    const { name, email } = this.state;\n    const { saveUserData } = this.props;\n    saveUserData(name, email);\n  }\n\n  render() {\n    const { email, isDisabled, name, openConfig } = this.state;\n\n    return (\n      <>\n        <div>\n          <div>\n            <header className=\"App-header\">\n              <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n              <p>\n                SUA VEZ\n              </p>\n            </header>\n          </div>\n          <div className=\"App\">\n            <input\n              className=\"input-form\"\n              data-testid=\"input-player-name\"\n              id=\"name\"\n              name=\"name\"\n              placeholder=\"nome\"\n              onChange={ this.handleChange }\n              type=\"text\"\n              value={ name }\n            />\n            <input\n              className=\"input-form\"\n              data-testid=\"input-gravatar-email\"\n              id=\"email\"\n              name=\"email\"\n              placeholder=\"email\"\n              onChange={ this.handleChange }\n              type=\"email\"\n              value={ email }\n            />\n            <Link to=\"/game\">\n              <button\n                className=\"btn\"\n                data-testid=\"btn-play\"\n                disabled={ isDisabled }\n                onClick={ this.handleClick }\n                type=\"button\"\n              >\n                Play\n              </button>\n            </Link>\n            <button\n              className=\"btn\"\n              data-testid=\"btn-settings\"\n              onClick={ () => this.setState({ openConfig: !openConfig }) }\n              type=\"button\"\n            >\n              Configuração\n            </button>\n          </div>\n        </div>\n        <div>{ openConfig && <Config /> }</div>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchRequestToken: (token) => dispatch(fetchTokenThunk(token)),\n  saveUserData: (name, email) => dispatch(userLoginData(name, email)),\n});\n\nLogin.propTypes = {\n  dispatchRequestToken: PropTypes.func.isRequired,\n  saveUserData: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Ranking from './pages/Ranking';\nimport Feedback from './pages/Feedback';\nimport Game from './pages/Game';\nimport Login from './pages/Login';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport store from './redux/store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>, document.getElementById('root'),\n);\n"],"sourceRoot":""}